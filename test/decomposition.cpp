#include <algorithm>
#include <catch2/catch.hpp>
#include <decomp/convex_decomposition.hpp>

using namespace decomp;

#define TEST_ASSERT(C)                                                                                                 \
    if (!(C))                                                                                                          \
    return EXIT_FAILURE

namespace
{

// Internal angle is 180deg or smaller
bool isInternallyConvex(Point const& a, Point const& b, Point const& c)
{
    auto left = c - a;
    auto right = b - a;

    // This is the same as determinant >= 0
    return right[0] * left[1] >= right[1] * left[0];
}

bool isConvex(PointList const& pointList, IndexList const& polygon)
{
    auto N = static_cast<int>(polygon.size());
    for (int i = 0; i < N; ++i)
    {
        int p = (i + N - 1) % N;
        int n = (i + 1) % N;

        if (!isInternallyConvex(pointList[polygon[p]], pointList[polygon[i]], pointList[polygon[n]]))
            return false;
    }

    return true;
}

bool allConvex(PointList const& pointList, std::vector<IndexList> const& polygonList)
{
    for (auto&& polygon : polygonList)
    {
        if (!isConvex(pointList, polygon))
            return false;
    }

    return true;
}
} // namespace

TEST_CASE("hertel-mehlhorn")
{
    std::vector<Point> pointList = { { -1, 0 }, { 0, 0 }, { 0, -1 }, { 1, -1 }, { 1, 1 }, { -1, 1 } };

    std::vector<std::uint16_t> triangleList = { 1, 4, 5, 1, 3, 4, 0, 1, 5, 1, 2, 3 };

    auto decomposed = hertelMehlhorn(pointList, triangleList, {});

    REQUIRE(allConvex(pointList, decomposed));
}

TEST_CASE("large-decomposition")
{
    std::vector<Point> pointList = {
        { -779.42297363281250, 30.000000000000000 },     { -727.46142578125000, 60.000000000000000 },
        { -727.46142578125000, 120.00000000000000 },     { -675.49987792968750, 150.00000000000000 },
        { -623.53839111328125, 120.00000000000000 },     { -571.57684326171875, 150.00000000000000 },
        { -519.61535644531250, 120.00000000000000 },     { -467.65380859375000, 150.00000000000000 },
        { -467.65380859375000, 210.00000000000000 },     { -415.69226074218750, 240.00000000000000 },
        { -415.69226074218750, 300.00000000000000 },     { -363.73077392578125, 330.00000000000000 },
        { -363.73077392578125, 390.00000000000000 },     { -415.69226074218750, 420.00000000000000 },
        { -415.69226074218750, 480.00000000000000 },     { -363.73077392578125, 510.00000000000000 },
        { -363.73077392578125, 570.00000000000000 },     { -311.76922607421875, 600.00000000000000 },
        { -259.80773925781250, 570.00000000000000 },     { -207.84619140625000, 600.00000000000000 },
        { -155.88464355468750, 570.00000000000000 },     { -155.88464355468750, 510.00000000000000 },
        { -103.92309570312500, 480.00000000000000 },     { -51.961547851562500, 510.00000000000000 },
        { -0.00012207031250000000, 480.00000000000000 }, { 51.961425781250000, 510.00000000000000 },
        { 103.92297363281250, 480.00000000000000 },      { 155.88452148437500, 510.00000000000000 },
        { 155.88452148437500, 570.00000000000000 },      { 207.84606933593750, 600.00000000000000 },
        { 259.80749511718750, 570.00000000000000 },      { 311.76904296875000, 600.00000000000000 },
        { 363.73059082031250, 570.00000000000000 },      { 363.73059082031250, 510.00000000000000 },
        { 415.69213867187500, 480.00000000000000 },      { 415.69213867187500, 420.00000000000000 },
        { 363.73059082031250, 390.00000000000000 },      { 363.73059082031250, 330.00000000000000 },
        { 415.69213867187500, 300.00000000000000 },      { 415.69213867187500, 240.00000000000000 },
        { 467.65368652343750, 210.00000000000000 },      { 467.65368652343750, 150.00000000000000 },
        { 519.61511230468750, 120.00000000000000 },      { 571.57666015625000, 150.00000000000000 },
        { 623.53820800781250, 120.00000000000000 },      { 675.49975585937500, 150.00000000000000 },
        { 727.46130371093750, 120.00000000000000 },      { 727.46130371093750, 60.000000000000000 },
        { 779.42272949218750, 30.000000000000000 },      { 779.42272949218750, -30.000000000000000 },
        { 727.46130371093750, -60.000000000000000 },     { 727.46130371093750, -120.00000000000000 },
        { 675.49975585937500, -150.00000000000000 },     { 623.53820800781250, -120.00000000000000 },
        { 571.57666015625000, -150.00000000000000 },     { 519.61511230468750, -120.00000000000000 },
        { 467.65368652343750, -150.00000000000000 },     { 467.65368652343750, -210.00000000000000 },
        { 415.69213867187500, -240.00000000000000 },     { 415.69213867187500, -300.00000000000000 },
        { 363.73059082031250, -330.00000000000000 },     { 363.73059082031250, -390.00000000000000 },
        { 415.69213867187500, -420.00000000000000 },     { 415.69213867187500, -480.00000000000000 },
        { 363.73059082031250, -510.00000000000000 },     { 363.73059082031250, -570.00000000000000 },
        { 311.76904296875000, -600.00000000000000 },     { 259.80749511718750, -570.00000000000000 },
        { 207.84606933593750, -600.00000000000000 },     { 155.88452148437500, -570.00000000000000 },
        { 155.88452148437500, -510.00000000000000 },     { 103.92297363281250, -480.00000000000000 },
        { 51.961425781250000, -510.00000000000000 },     { -0.00012207031250000000, -480.00000000000000 },
        { -51.961547851562500, -510.00000000000000 },    { -103.92309570312500, -480.00000000000000 },
        { -155.88464355468750, -510.00000000000000 },    { -155.88464355468750, -570.00000000000000 },
        { -207.84619140625000, -600.00000000000000 },    { -259.80773925781250, -570.00000000000000 },
        { -311.76922607421875, -600.00000000000000 },    { -363.73077392578125, -570.00000000000000 },
        { -363.73077392578125, -510.00000000000000 },    { -415.69226074218750, -480.00000000000000 },
        { -415.69226074218750, -420.00000000000000 },    { -363.73077392578125, -390.00000000000000 },
        { -363.73077392578125, -330.00000000000000 },    { -415.69226074218750, -300.00000000000000 },
        { -415.69226074218750, -240.00000000000000 },    { -467.65380859375000, -210.00000000000000 },
        { -467.65380859375000, -150.00000000000000 },    { -519.61535644531250, -120.00000000000000 },
        { -571.57684326171875, -150.00000000000000 },    { -623.53839111328125, -120.00000000000000 },
        { -675.49987792968750, -150.00000000000000 },    { -727.46142578125000, -120.00000000000000 },
        { -727.46142578125000, -60.000000000000000 },    { -779.42297363281250, -30.000000000000000 },
        { -259.80773925781250, 30.000000000000000 },     { -207.84619140625000, 60.000000000000000 },
        { -207.84619140625000, 120.00000000000000 },     { -155.88464355468750, 150.00000000000000 },
        { -155.88464355468750, 210.00000000000000 },     { -103.92309570312500, 240.00000000000000 },
        { -51.961547851562500, 210.00000000000000 },     { -51.961547851562500, 150.00000000000000 },
        { -0.00012207031250000000, 120.00000000000000 }, { 51.961425781250000, 150.00000000000000 },
        { 51.961425781250000, 210.00000000000000 },      { 103.92297363281250, 240.00000000000000 },
        { 155.88452148437500, 210.00000000000000 },      { 155.88452148437500, 150.00000000000000 },
        { 207.84606933593750, 120.00000000000000 },      { 207.84606933593750, 60.000000000000000 },
        { 259.80749511718750, 30.000000000000000 },      { 259.80749511718750, -30.000000000000000 },
        { 207.84606933593750, -60.000000000000000 },     { 207.84606933593750, -120.00000000000000 },
        { 155.88452148437500, -150.00000000000000 },     { 155.88452148437500, -210.00000000000000 },
        { 103.92297363281250, -240.00000000000000 },     { 51.961425781250000, -210.00000000000000 },
        { 51.961425781250000, -150.00000000000000 },     { -0.00012207031250000000, -120.00000000000000 },
        { -51.961547851562500, -150.00000000000000 },    { -51.961547851562500, -210.00000000000000 },
        { -103.92309570312500, -240.00000000000000 },    { -155.88464355468750, -210.00000000000000 },
        { -155.88464355468750, -150.00000000000000 },    { -207.84619140625000, -120.00000000000000 },
        { -207.84619140625000, -60.000000000000000 },    { -259.80773925781250, -30.000000000000000 }
    };

    IndexList outerPolygon;
    for (int i = 0; i < 98; ++i)
        outerPolygon.push_back(i);

    REQUIRE(computeWinding(pointList, outerPolygon) == Winding::Clockwise);

    std::reverse(outerPolygon.begin(), outerPolygon.end());

    REQUIRE(computeWinding(pointList, outerPolygon) != Winding::Clockwise);

    IndexList hole;
    for (int i = 98; i < static_cast<int>(pointList.size()); ++i)
        hole.push_back(i);

    REQUIRE(computeWinding(pointList, hole) == Winding::Clockwise);

    auto decomposed = decompose(pointList, outerPolygon, { hole });

    REQUIRE(allConvex(pointList, decomposed));
}

TEST_CASE("medium decomposition")
{
    std::vector<Point> const pointList = {
        { 103.92297363281250, 300.00000000000000 },  { 155.88452148437500, 330.00000000000000 },
        { 155.88452148437500, 390.00000000000000 },  { 207.84606933593750, 420.00000000000000 },
        { 259.80749511718750, 390.00000000000000 },  { 311.76904296875000, 420.00000000000000 },
        { 363.73059082031250, 390.00000000000000 },  { 363.73059082031250, 330.00000000000000 },
        { 415.69213867187500, 300.00000000000000 },  { 415.69213867187500, 240.00000000000000 },
        { 467.65368652343750, 210.00000000000000 },  { 467.65368652343750, 150.00000000000000 },
        { 519.61511230468750, 120.00000000000000 },  { 571.57666015625000, 150.00000000000000 },
        { 623.53820800781250, 120.00000000000000 },  { 623.53820800781250, 60.000000000000000 },
        { 571.57666015625000, 30.000000000000000 },  { 571.57666015625000, -30.000000000000000 },
        { 623.53820800781250, -60.000000000000000 }, { 623.53820800781250, -120.00000000000000 },
        { 571.57666015625000, -150.00000000000000 }, { 519.61511230468750, -120.00000000000000 },
        { 467.65368652343750, -150.00000000000000 }, { 467.65368652343750, -210.00000000000000 },
        { 415.69213867187500, -240.00000000000000 }, { 363.73059082031250, -210.00000000000000 },
        { 311.76904296875000, -240.00000000000000 }, { 259.80749511718750, -210.00000000000000 },
        { 259.80749511718750, -150.00000000000000 }, { 207.84606933593750, -120.00000000000000 },
        { 207.84606933593750, -60.000000000000000 }, { 259.80749511718750, -30.000000000000000 },
        { 259.80749511718750, 30.000000000000000 },  { 207.84606933593750, 60.000000000000000 },
        { 207.84606933593750, 120.00000000000000 },  { 155.88452148437500, 150.00000000000000 },
        { 155.88452148437500, 210.00000000000000 },  { 103.92297363281250, 240.00000000000000 }
    };

    IndexList polygon;
    for (std::size_t i = 0; i < pointList.size(); ++i)
        polygon.push_back(static_cast<std::uint16_t>(pointList.size() - 1 - i));

    auto triangleList = earClipping(pointList, polygon);

    auto decomposed = hertelMehlhorn(pointList, triangleList, {});

    REQUIRE(allConvex(pointList, decomposed));
}

TEST_CASE("simple decomposition")
{
    PointList const pointList = { { 1, 2 }, { 2, 0 }, { 1, 1 }, { 0, 0 } };

    IndexList triangleList = { 2, 1, 0, 3, 2, 0 };
    auto convexList = hertelMehlhorn(pointList, triangleList, {});

    REQUIRE(allConvex(pointList, convexList));
}

TEST_CASE("complete decomposition")
{
    std::vector<Point> pointList = {
        { -4, 0 }, { -3, -2 }, { 3, -2 }, { 4, 0 },  { 3, 2 }, { -3, 2 }, // points on the outer polygon
        { -3, 0 }, { -2, -1 }, { -1, 0 }, { -2, 1 },                      // points on the left hole
        { 1, 0 },  { 2, -1 },  { 3, 0 },  { 2, 1 }                        // points on the right hole
    };

    std::vector<std::uint16_t> outerPolygon = { 0, 1, 2, 3, 4, 5 };

    std::vector<std::vector<std::uint16_t>> holeList = { { 13, 12, 11, 10 }, { 9, 8, 7, 6 } };

    auto decomposed = decompose(pointList, outerPolygon, holeList);
    REQUIRE(allConvex(pointList, decomposed));
}
